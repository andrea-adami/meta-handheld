From 92a0ddf6c78180510b47dc3734ccc68e733aad3a Mon Sep 17 00:00:00 2001
From: Dmitry Artamonow <mad_soft@inbox.ru>
Date: Sat, 21 Mar 2009 16:28:50 +0300
Subject: [PATCH 5/7] power: add driver for battery reading on iPaq h3xxx

This adds a driver for reading the battery status of the
battery connected to the Atmel microcontroller on the
iPAQ h3xxx series.

Based on a driver from handhelds.org 2.6.21 kernel, written
by Alessandro GARDICH.

Signed-off-by: Dmitry Artamonow <mad_soft@inbox.ru>
Signed-off-by: Linus Walleij <linus.walleij@linaro.org>
---
 drivers/power/Kconfig              |   7 ++
 drivers/power/Makefile             |   1 +
 drivers/power/ipaq_micro_battery.c | 235 +++++++++++++++++++++++++++++++++++++
 3 files changed, 243 insertions(+)
 create mode 100644 drivers/power/ipaq_micro_battery.c

diff --git a/drivers/power/Kconfig b/drivers/power/Kconfig
index 7b8979c63f48..380e4846428f 100644
--- a/drivers/power/Kconfig
+++ b/drivers/power/Kconfig
@@ -137,6 +137,13 @@ config BATTERY_COLLIE
 	  Say Y to enable support for the battery on the Sharp Zaurus
 	  SL-5500 (collie) models.
 
+config BATTERY_IPAQ_MICRO
+	tristate "iPAQ Atmel Micro ASIC battery driver"
+	depends on MFD_IPAQ_MICRO
+	help
+	  Choose this option if you want to monitor battery status on
+	  Compaq/HP iPAQ h3100 and h3600.
+
 config BATTERY_WM97XX
 	bool "WM97xx generic battery driver"
 	depends on TOUCHSCREEN_WM97XX=y
diff --git a/drivers/power/Makefile b/drivers/power/Makefile
index 653bf6ceff30..1451aa7b9fc2 100644
--- a/drivers/power/Makefile
+++ b/drivers/power/Makefile
@@ -25,6 +25,7 @@ obj-$(CONFIG_BATTERY_PMU)	+= pmu_battery.o
 obj-$(CONFIG_BATTERY_OLPC)	+= olpc_battery.o
 obj-$(CONFIG_BATTERY_TOSA)	+= tosa_battery.o
 obj-$(CONFIG_BATTERY_COLLIE)	+= collie_battery.o
+obj-$(CONFIG_BATTERY_IPAQ_MICRO) += ipaq_micro_battery.o
 obj-$(CONFIG_BATTERY_WM97XX)	+= wm97xx_battery.o
 obj-$(CONFIG_BATTERY_SBS)	+= sbs-battery.o
 obj-$(CONFIG_BATTERY_BQ27x00)	+= bq27x00_battery.o
diff --git a/drivers/power/ipaq_micro_battery.c b/drivers/power/ipaq_micro_battery.c
new file mode 100644
index 000000000000..413e91cc128e
--- /dev/null
+++ b/drivers/power/ipaq_micro_battery.c
@@ -0,0 +1,235 @@
+/*
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation.
+ *
+ * h3xxx atmel micro companion support, battery subdevice
+ * based on previous kernel 2.4 version
+ * Author : Alessandro Gardich <gremlin@gremlin.it>
+ * Author : Linus Walleij <linus.walleij@linaro.org>
+ *
+ */
+
+#include <linux/module.h>
+#include <linux/version.h>
+
+#include <linux/init.h>
+#include <linux/fs.h>
+#include <linux/interrupt.h>
+#include <linux/sched.h>
+#include <linux/pm.h>
+#include <linux/sysctl.h>
+#include <linux/proc_fs.h>
+#include <linux/delay.h>
+#include <linux/device.h>
+#include <linux/power_supply.h>
+#include <linux/platform_device.h>
+#include <linux/timer.h>
+#include <linux/mfd/ipaq-micro.h>
+#include <linux/completion.h>
+
+#define BATT_PERIOD (10 * HZ)
+
+#define H3600_BATT_STATUS_HIGH         0x01
+#define H3600_BATT_STATUS_LOW          0x02
+#define H3600_BATT_STATUS_CRITICAL     0x04
+#define H3600_BATT_STATUS_CHARGING     0x08
+#define H3600_BATT_STATUS_CHARGEMAIN   0x10
+#define H3600_BATT_STATUS_DEAD         0x20 /* Battery will not charge */
+#define H3600_BATT_STATUS_NOTINSTALLED 0x20 /* For expansion pack batteries */
+#define H3600_BATT_STATUS_FULL         0x40 /* Battery fully charged */
+#define H3600_BATT_STATUS_NOBATTERY    0x80
+#define H3600_BATT_STATUS_UNKNOWN      0xff
+
+
+static struct ipaq_micro *p_micro;
+
+struct timer_list batt_timer;
+
+struct {
+	int ac;
+	int update_time;
+	int chemistry;
+	int voltage;
+	int temperature;
+	int flag;
+} micro_battery;
+
+static void micro_battery_receive(int len, unsigned char *data)
+{
+	pr_debug("h3600_battery: AC = %02x\n", data[0]);
+	pr_debug("h3600_battery: BAT1 chemistry = %02x\n", data[1]);
+	pr_debug("h3600_battery: BAT1 voltage = %d %02x%02x\n",
+		(data[3] << 8) + data[2], data[2], data[3]);
+	pr_debug("h3600_battery: BAT1 status = %02x\n", data[4]);
+
+	micro_battery.chemistry = data[1];
+	micro_battery.voltage = ((((unsigned short)data[3] << 8) + \
+				data[2]) * 5000L) * 1000 / 1024;
+	micro_battery.flag = data[4];
+
+	if (len == 9) {
+		pr_debug("h3600_battery: BAT2 chemistry = %02x\n", data[5]);
+		pr_debug("h3600_battery: BAT2 voltage = %d %02x%02x\n",
+				(data[7] << 8) + data[6], data[6], data[7]);
+		pr_debug("h3600_battery: BAT2 status = %02x\n", data[8]);
+	}
+}
+
+static void micro_temperature_receive(int len, unsigned char *data)
+{
+	micro_battery.temperature = ((unsigned short)data[1] << 8) + data[0];
+}
+
+void h3600_battery_read_status(unsigned long data)
+{
+	if (++data % 2)
+		ipaq_micro_tx_msg(p_micro, MSG_BATTERY, 0, NULL);
+	else
+		ipaq_micro_tx_msg(p_micro, MSG_THERMAL_SENSOR, 0, NULL);
+
+	batt_timer.expires += BATT_PERIOD;
+	batt_timer.data = data;
+
+	add_timer(&batt_timer);
+}
+
+int get_capacity(struct power_supply *b)
+{
+	switch (micro_battery.flag) {
+	case H3600_BATT_STATUS_HIGH:
+		return 100;
+		break;
+	case H3600_BATT_STATUS_LOW:
+		return 50;
+		break;
+	case H3600_BATT_STATUS_CRITICAL:
+		return 5;
+		break;
+	default:
+		break;
+	}
+	return 0;
+}
+
+int get_status(struct power_supply *b)
+{
+	if (micro_battery.flag == H3600_BATT_STATUS_UNKNOWN)
+		return POWER_SUPPLY_STATUS_UNKNOWN;
+
+	if (micro_battery.flag & H3600_BATT_STATUS_FULL)
+		return POWER_SUPPLY_STATUS_FULL;
+
+	if ((micro_battery.flag & H3600_BATT_STATUS_CHARGING) ||
+		(micro_battery.flag & H3600_BATT_STATUS_CHARGEMAIN))
+		return POWER_SUPPLY_STATUS_CHARGING;
+
+	return POWER_SUPPLY_STATUS_DISCHARGING;
+}
+
+static int micro_batt_get_property(struct power_supply *b,
+					enum power_supply_property psp,
+					union power_supply_propval *val)
+{
+	switch (psp) {
+	case POWER_SUPPLY_PROP_STATUS:
+		val->intval = get_status(b);
+		break;
+	case POWER_SUPPLY_PROP_VOLTAGE_MAX_DESIGN:
+		val->intval = 4700000;
+		break;
+	case POWER_SUPPLY_PROP_CAPACITY:
+		val->intval = get_capacity(b);
+		break;
+	case POWER_SUPPLY_PROP_TEMP:
+		val->intval = micro_battery.temperature;
+		break;
+	case POWER_SUPPLY_PROP_VOLTAGE_NOW:
+		val->intval = micro_battery.voltage;
+		break;
+	default:
+		return -EINVAL;
+	};
+
+	return 0;
+}
+
+static enum power_supply_property micro_batt_props[] = {
+	POWER_SUPPLY_PROP_STATUS,
+	POWER_SUPPLY_PROP_VOLTAGE_MAX_DESIGN,
+	POWER_SUPPLY_PROP_CAPACITY,
+	POWER_SUPPLY_PROP_TEMP,
+	POWER_SUPPLY_PROP_VOLTAGE_NOW,
+};
+
+static struct power_supply h3600_battery = {
+	.name               = "main-battery",
+	.properties         = micro_batt_props,
+	.num_properties     = ARRAY_SIZE(micro_batt_props),
+	.get_property       = micro_batt_get_property,
+	.use_for_apm        = 1,
+};
+
+static int micro_batt_probe(struct platform_device *pdev)
+{
+	power_supply_register(&pdev->dev, &h3600_battery);
+
+	p_micro = dev_get_drvdata(pdev->dev.parent);
+	spin_lock(&p_micro->lock);
+	p_micro->h_batt = micro_battery_receive;
+	p_micro->h_temp = micro_temperature_receive;
+	spin_unlock(&p_micro->lock);
+
+	init_timer(&batt_timer);
+	batt_timer.expires = jiffies + BATT_PERIOD;
+	batt_timer.data = 0;
+	batt_timer.function = h3600_battery_read_status;
+
+	add_timer(&batt_timer);
+
+	dev_info(&pdev->dev, "iPAQ micro battery driver\n");
+	return 0;
+}
+
+static int micro_batt_remove(struct platform_device *pdev)
+{
+	power_supply_unregister(&h3600_battery);
+	init_timer(&batt_timer);
+	p_micro->h_batt = NULL;
+	p_micro->h_temp = NULL;
+	del_timer_sync(&batt_timer);
+
+	return 0;
+}
+
+static int micro_batt_suspend(struct device *dev)
+{
+	del_timer(&batt_timer);
+
+	return 0;
+}
+
+static int micro_batt_resume(struct device *dev)
+{
+	add_timer(&batt_timer);
+
+	return 0;
+}
+
+static const struct dev_pm_ops micro_batt_dev_pm_ops = {
+	SET_SYSTEM_SLEEP_PM_OPS(micro_batt_suspend, micro_batt_resume)
+};
+
+struct platform_driver micro_batt_device_driver = {
+	.driver		= {
+		.name	= "ipaq-micro-battery",
+		.pm	= &micro_batt_dev_pm_ops,
+	},
+	.probe		= micro_batt_probe,
+	.remove		= micro_batt_remove,
+};
+module_platform_driver(micro_batt_device_driver);
+
+MODULE_LICENSE("GPL");
+MODULE_DESCRIPTION("driver for iPAQ Atmel micro battery");
+MODULE_ALIAS("platform:battery-ipaq-micro");
-- 
1.8.3.1

